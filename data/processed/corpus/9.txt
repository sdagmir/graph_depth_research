doc_id: 9
Лекция 4 HTTP Разработка интернет приложений Канев Антон Игоревич
Компьютерные сети. Модель OSI • 7-ми уровневая модель OSI • Приложения работают на самом высоком 7-ом уровне • Физическая среда передачи на первом уровне
Модель TCP/IP • TCP/IP – стек протоколов на которых базируется Интернет
Стандарты интернета • В отличие от корпоративных систем, интернет изначально строится на открытых стандартах. Эти стандарты открыто опубликованы, любое заинтересованное лицо может принять участие в их разработке. • Разработкой ̆ стандартов занимается IETF – Официальный сайт h?ps://www.ieH.org – Список RFC опубликован здесь h?ps://www.rfc-editor.org/rfc-index.html • Стандарты для URL, HTTP, FTP.
Стандарты интернета – RFC Long Polling
Real-time web • Ajax • Push • WebSocket
Компоненты Web • Тим Бернерс-Ли создал три основных компонента WWW: • язык гипертекстовой разметки документов HTML (HyperText Markup Language); • универсальный способ адресации ресурсов URI (Universal [Uniform] Resource Idenzfier); • протокол обмена гипертекстовой информацией HTTP (HyperText Transfer Protocol – протокол передачи гипертекста). • Позже к этим трем компонентам добавился четвертый̆ CGI: исполняемая часть, с помощью которой можно создавать динамические HTML-документы.
HTTP • HTTP – протокол передачи гипертекста. Сейчас для произвольных данных Протокол является клиент-серверным, то есть существуют: • Клиент – потребитель, он инициирует взаимодействие • Сервер – поставщик, ждет запроса, обрабатывает его и возвращает обратно ответ • Данный тип взаимодействия накладывает ограничение при получении уведомлений, сообщений в чате и тд • HTTP – прокол без хранения состояния между разными запросами. Но компоненты могут хранить например куки (клиенты) или сессии (сервер)
История HTTP • 1991 HTTP/0.9 Только GET • 1996 HTTP/1.0 Появился POST и др методы, заголовки, кеширование • 1999 HTTP/1.1 Keep alive, host (виртуальный хостинг) • 2015 HTTP/2 На основе SPDY: Бинарный, сжатие заголовков, мультиплексирование, приоритезация ресурсов, отмена загрузки, Server Push • Draft HTTP/3 На основе QUIC, из-за развития беспроводных сетей и возникающих из-за этого проблем в стеке (миграции IP и тд): ID соединения, отказ от TCP
Доля трафика h"ps://w3techs.com/technologies/history_overview/site_element/all/y
URI • Вторым важным компонентом WWW стал универсальный способ адресации ресурсов URI (Universal Resource IdenIfier). • Кроме термина URI можно также встретить термины: – URL (Universal Resource Locator), – URN (Universal Resource Name). • Наиболее общим термином является URI, который может быть или URL или URN. В соответствии со спецификацией URL определяет ресурс по механизму доступа к ресурсу, а URN по уникальному имени (это не имя файла). • В результате терминологической путаницы термины URI и URL часто стали использоваться как синонимы. Термин URN используется достаточно редко. Некоторое применение он нашел в технологии XML.
URI – схема HTTP • h"p:// хост : порт / путь и имя файла ? параметры # якорь гиперссылки • Пример: h"p:// 127.0.0.1 :8080/index.html h"p://localhost:8080/file.html h"p://iu5.bmstu.ru:8080/cat1/cat2/script.asp?param1=1&param2=2#anchor1 • Порт по умолчанию – 80.
URI – другие схемы URI – схема FTP • !p://пользователь : пароль @ хост : порт / путь и имя файла • Пример: !p://user:password@host1.com/public/1.txt • Порт по умолчанию – 21. URI – схема mailto • Предполагает использование протокола SMTP • mailto:adr1@mail.ru?cc=adr2@mail.ru&subject=тема &body=тело письма
URI • Рекомендуется использовать наиболее общий термин URI, хотя во многих спецификациях можно также встретить термин URL. Фактически, все адреса в WWW обозначающие ресурсы, являются URL. • URI (URL) используется в гипертекстовых ссылках для обозначения ресурсов. С помощью URL можно адресовать как гипертекстовые документы формата HTML, так и другие ресурсы, например электронную почту, (cid:128)p. • Для создания URI на национальных языках разрабатывается стандарт IRI.
URI • Нормализация URI • Семантический URI Non-seman)c URL Semantic URL http://example.com/index.php?page=name http://example.com/name http://example.com/index.php?page=consulting/marketing http://example.com/consulting/marketing http://example.com/products?category=2&pid=25 http://example.com/products/2/25 http://example.com/cgi-bin/feed.cgi?feed=news&frm=rss http://example.com/news.rss
HTTP • Протокол HTTP (поверх TCP) • Протокол HTTPS (поверх TLS и TCP) • Протокол HTTP/2 • Протокол HTTP/3 (поверх QUIC) • Протоколы на основе HTTP: – XML-RPC – SOAP – WebDAV JSON-RPC (AJAX) gPRC
HTTP request/response • Методы GET, POST, PUT, … • Коды состояний 200 OK 404 Not Found • Заголовки параметр: значение
HTTP запросы в браузере • На вкладке Network отображаются все запросы • Получение HTML, js, css, изображений, а также AJAX (Fetch/XHR) запросы • Отображаются заголовки, ответ и тд
Методы • OPTIONS • GET запрос содержимого ресурса («select») • HEAD • POST – передача ресурсу данных пользователя («insert») • PUT – загрузка содержимого запроса на ресурс («update») • PATCH – PUT к фрагменту ресурса (например статус) • DELETE – удаление ресурса • TRACE • CONNECT
Коды состояния Код Класс Назначение Информирование о процессе передачи. В HTTP/1.0 — сообщения с такими кодами Информационный должны игнорироваться. 1xx (informational) В HTTP/1.1 — клиент должен быть готов принять этот класс сообщений как обычный ответ, но ничего отправлять серверу не нужно. Информирование о случаях успешного принятия и обработки запроса клиента. В 2xx Успех (Success) зависимости от статуса, сервер может ещё передать заголовки и тело сообщения. Сообщает клиенту, что для успешного выполнения операции необходимо сделать Перенаправление 3xx другой запрос (как правило по другому URI). Адрес, по которому клиенту следует (Redirection) произвести запрос, сервер указывает в заголовке Location. Ошибка клиента Указание ошибок со стороны клиента. При использовании всех методов, кроме HEAD, 4xx (Client Error) сервер должен вернуть в теле сообщения гипертекстовое пояснение для пользователя. Информирование о случаях неудачного выполнения операции по вине сервера. Для Ошибка сервера 5xx всех ситуаций, кроме использования метода HEAD, сервер должен включать в тело (Server Error) сообщения объяснение, которое клиент отобразит пользователю.
HTTPS • HTTPS протокол на основе TLS (ранее SSL) для аутентификации (асимметричное) и конфиденциальности (симметричное шифрование) • Разработан 1994 году Netscape (родилась из браузера Mosaic) • Порт по умолчанию 443
Протоколы модели TCP/IP
HTTP/2 • Протокол стал бинарным • Появились потоки Streams в рамках одного TCP соединения для всего содержимого страницы • Проблема возникает если теряем один пакет одного потока. Часто в беспроводных сетях • HTTP/2 используется в качестве транспорта для gRPC
HTTP/3 • Отказываемся от TCP, переходим на UDP • Заголовки UDP гораздо проще • QUIC сочетает потоки, TLS, гарантированная доставка
HTTP/2 vs QUIC • В HTTP/2 все файлы в одном соединении • В QUIC делаем несколько потоков для разных файлов. Два получим и начнем обрабатывать, третий продолжим ждать