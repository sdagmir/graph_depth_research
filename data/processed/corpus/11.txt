doc_id: 11
Лекция 6 Авторизация. Сессии Разработка интернет приложений Канев Антон Игоревич
Техническое задание • СоставТЗна итоговую систему (использовать сплошную нумерацию внутри пунктов): 1. цель 2. назначениекраткое описание для чего, кто работает в системе 3. задачи12 задач (8 лабораторных-задач по бекенду/фронтенду, нативное приложение, демо в Pages, документация, репозиторий Git) с указанием ваших технологий по каждой задаче 4. Функциональные требованиясписок HTTP методов, далее список окон и какие действия для каких групп пользователей доступны. Указать, какие методы бэкенда при этом вызываются. Всего 14 подпунктов HTTP методы, меню и 12 страниц приложения: • гость: регистрация, аутентификация, главная, список услуг, одна услуга, 403 и 404 • создательзаявки: конструктор заявки, список заявок, личный кабинет • модератор: список услуг таблицей, редактирование/создание услуги 5. требования к аппаратномуобеспечению для сервера и клиента 6. требования к программномуобеспечению с версиями для серверных компонентов и для клиента
ТЗ. Функциональные требования • Функциональные требования • Описание элементов интерфейса и доступных действий для разных ролей пользователей • Группировка по страницам интерфейса • При описании интерфейса либо лучше сослаться на методы, либо в методах сослаться на конкретные пункты функций
Оформление и ГОСТ • Документацию оформляем по ГОСТ (1.5 интервал, 1.25 см отступ, 14 пт и тд) • Требования по оформлению, ГОСТ, TestVKR необходимо искать на сайте с требованиями по ВКРБ (ссылка дана в репозитории) • Отчет по ДЗ обязательно проверить через TestVKR h"ps://drive.google.com/file/d/1bmQMZeqCY9WmmqQviDvA0rju7a1RgMh_/view
Аутентификация Аутентификация (authentication) — процедура проверки подлинности, ́ например: • проверка подлинности пользователя путём сравнения введённого им пароля (для указанного логина) с паролем, сохранённым в базе данных пользовательских логинов; • подтверждение подлинности электронного письма путём проверки цифровой подписи письма по открытому ключу отправителя; • проверка контрольной суммы файла на соответствие сумме, заявленной автором этого файла. Идентификация — процедура, в результате выполнения которой для субъекта идентификации выявляется его идентификатор, однозначно определяющий этого субъекта в информационной системе.
Авторизация • Авторизация (authorization «разрешение; уполномочивание») — ́ предоставление определённому лицу или группе лиц прав на выполнение определённых действий; а также процесс проверки (подтверждения) данных прав при попытке выполнения этих действий. • Авторизация производит контроль доступа к различным ресурсам системы в процессе работы легальных пользователей после успешного прохождения ими аутентификации.
JWT • JSON Web Token • Как правило, используется для передачи данных для аутентификации в клиент-серверных приложениях. • Токены создаются сервером, подписываются секретным ключом и передаются клиенту, который в дальнейшем использует данный токен для подтверждения подлинности аккаунта.
Сессии • При авторизации на сайте сервер отсылает в ответ HTTP-заголовок SetCookie, чтобы сохранить куки в браузере с уникальным идентификатором сессии («session idenlfier»). • Это идентификатор будет являться ключом уникальным сессии пользователя. • Во время любого следующего запроса к этому же серверу за какими-либо данными браузер посылает на сервер HTTP-заголовок Cookie, в которым в формате <ключ>=<значение>. • Таким образом, сервер понимает, кто сделал запрос.
Куки • Куки (cookie, букв. — «печенье») — ́ небольшой фрагмент данных, отправленный веб-сервером и хранимый на компьютере пользователя. • Веб-клиент (обычно веб-браузер) всякий раз при попытке открыть страницу соответствующего сайта пересылает этот фрагмент данных веб-серверу в составе HTTP-запроса. • Применяется для сохранения данных на стороне пользователя
Пользователи • Концептуально сущность пользователя должна содержать его личные данные, такие данные: • номер телефона • почта • имя • никнейм • и тд...
DRF аутентификация • Создадим view для авторизации пользователей • Чтобы зарегистрировать пользователя в системе используйте login(). Он принимает объект H"pRequest и объект User. • login() сохраняет идентификатор пользователя в сессии, используя фреймворк сессий Django.
Авторизация • Чтобы предоставить доступ пользователю в приложении и наделить его правами, мы реализуем авторизацию • Если у нас один вид пользователей – одна роль, нам достаточно просто проверить аутентифицирован ли он
Ограничения на бэкенде • Чтобы ограничить неавторизованным пользователем доступ к контенту, создадим view и добавим туда authenecaeon_classes и permission_classes
Ролевая модель • Для каждого пользователя в нашей БД мы указываем его роль • Это может быть поле в таблице пользователей, отдельная таблица или набор таблиц. Так мы можем разделить функционал по отдельным ролям • Чтобы разделять права пользователей в приложении нам требуются написать Классы прав доступа
Permissions • Когда мы создали Классы прав доступа, их можно использовать в контроллерах • В наших функциях указываем конкретные разрешения, которые требуются пользователям для выполнения действий
Postman • При тестировании наши куки (или токен JWT) указываем в заголовках запроса
WSL для Redis под Windows • Windows Subsystem for Linux (WSL) — слой совместимости для запуска Linux-приложений (двоичных исполняемых файлов в формате ELF) в ОС Windows
Redis • REmote DIc&onary Server, «удалённый серверный словарь» • Резидентная система управления базами данных • Данные размещаются в оперативной памяти • Механизмы снимков на дисках для постоянного хранения • Структура данных ключ-значение, словаря • Максимальная производительность на атомарных операциях • Механизм подписок не гарантирует, что сообщение будет доставлено
Redis. Отличия от реляционных От реляционных баз Redis отличается: • более высокой производительностью (благодаря хранению данных в оперативной памяти сервера, значительно увеличивается число выполняемых операций); • отсутствием языка SQL (Lua-скрипты как альтернатива); • гибкостью (данные находятся не в жёстких структурах (таблицах), а в более удобных (строки, списки, хеши, множества, сортированные множества), что облегчает работу программисту; • лучшей масштабируемостью. Однако Redis редко используется как основное хранилище в крупных системах, так как не удовлетворяет требованиям ACID, то есть не обеспечивает 100%-ной целостности данных.
Redis. Применение • для хранения пользовательских сессий (HTML-фрагменты вебстраниц или товары корзины интернет-магазина); • для хранения промежуточных данных (поток сообщений на стене, голосовалки, таблицы результатов); • как брокер сообщений (стратегия «издатель-подписчик» позволяет создавать новостные ленты, групповые чаты); • как СУБД для небольших приложений, блогов; • для кэширования данных из основного хранилища, что значительно снижает нагрузку на реляционную базу данных; • для хранения «быстрых» данных — когда важны скорость и критичны задержки передачи (аналитика и анализ данных, финансовые и торговые сервисы).
Redis. Пример • HSET — сохраняет значение по ключу • создали объект person1 с двумя полями (name и age) и соответствующими значениями.
Redis. Пример • HGET — получение значения по ключу (для определённого поля) • Получили значение поля name у ключа person1
Redis • Установить • Запустить • Использовать
Redis с Django • Зайдем в файл settings.py и пропишем туда сокет запущенной БД: • Далее создадим библиотечный инстанс нашего хранилища сессий в файле views.py:
Аутентификация с Redis
Авторизация с Redis Соответственно в методах, в которых нужно проверить имеет ли пользователя доступ к запрашиваемой информации, мы должны: • взять из запроса куки (через ssid = request.COOKIES["session_id"]) • посмотреть есть ли в хранилище сессий такая запись, и достать идентификатор пользователя (session_storage.get(ssid)) • проверить, можно ли данному пользователю смотреть запрошенную информацию через permissions (зависит от бизнес-логики вашего проекта) • После аутентификации обратно во фронтенд необходимо отправить признак модератора, чтобы изменить представление приложения
Swagger • Swagger – это фреймворк для спецификации RESTful API. • Его прелесть заключается в том, что он дает возможность интерактивно просматривать спецификацию • и отправлять запросы – так называемый Swagger UI
OpenAPI • The OpenAPI Specification (изначально известная как Swagger Specification) • формализованная спецификация и экосистема множества инструментов, предоставляющая интерфейс между front-end системами, кодом библиотек низкого уровня и коммерческими решениями в виде API. • Вместе с тем, cпецификация построена таким образом, что не зависит от языков программирования, и удобна в использовании как человеком, так и машиной
Добавление Swagger • Устанавливаем drf-yasg • Подключаем swagger в url, обработчики появятся в swagger автоматически • По этому адресу будет json файл. Мы будем использовать его для генерации кода фронтенда h"p://127.0.0.1:8000/swagger/?format=openapi
Просмотр • По данной ссылке доступен наш swagger • Теперь здесь мы можем протестировать все наши методы http://127.0.0.1/swagger/