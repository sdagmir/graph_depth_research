doc_id: 10
Лекция 5 Веб-сервисы Разработка интернет приложений Канев Антон Игоревич
Трехзвенная архитектура. API • Чтобы использовать вебсервер как универсальный источник данных для других приложений, нам нужно сделать веб-сервис, который предоставит нам Web API • Теперь данные мы будем получать не как HTML, а структурированно в формате JSON
Веб-служба • Веб-служба, веб-сервис (web service) — идентифицируемая уникальным вебадресом (URL-адресом) программная система со стандартизированными интерфейсами. • Веб-службы могут взаимодействовать друг с другом и со сторонними приложениями посредством сообщений, основанных на определённых протоколах (SOAP, XML-RPC и т. д.) и соглашениях (REST). Вебслужба является единицей модульности при использовании сервисориентированной архитектуры приложения.
API • API (Applicacon Programming Interface) — описание способов взаимодействия одной компьютерной программы с другими. • Обычно входит в описание какого-либо интернет-протокола, программного фреймворка или стандарта вызовов функций операционной системы. • Часто реализуется отдельной программной библиотекой или сервисом операционной системы. • Проще говоря, это набор компонентов, с помощью которых компьютерная программа (бот или же сайт) может использовать другую программу.
REST • REST Representaconal State Transfer. Набор правил того, как программисту организовать написание кода серверного приложения, чтобы все системы легко обменивались данными и приложение можно было масштабировать • RESTful – веб-службы не нарушающие ограничений • Ограничения (знать!): клиент-сервер, отсутствие состояния, кэширование, единообразие интерфейса, слои, код по требованию
RPC • RPC remote procedure call. Удалённый вызов процедур • Реализация RPC-технологии включает два компонента: сетевой протокол для обмена в режиме клиент-сервер и язык сериализации объектов (или структур для необъектных RPC) • JSON-RPC • XML RPC • gRPC • SOAP
gRPC • gRPC (Remote Procedure Calls) — это система удалённого вызова процедур (RPC) с открытым исходным кодом, первоначально разработанная в Google • В качестве транспорта используется HTTP/2, в качестве языка описания интерфейса — Protocol Buffers. • gRPC предоставляет такие функции как аутентификация, двунаправленная потоковая передача и управление потоком, блокирующие или неблокирующие привязки, а также отмена и тайм-ауты.
AJAX • AJAX, Ajax (Asynchronous Javascript and XML — «асинхронный JavaScript и XML») — подход к построению интерактивных пользовательских интерфейсов веб-приложений, заключающийся в «фоновом» обмене данными браузера с веб-сервером. • В результате при обновлении данных вебстраница не перезагружается полностью, и веб-приложения становятся быстрее и удобнее. • JSON-RPC (JavaScript Object Notabon Remote Procedure Call — JSON-вызов удалённых процедур) — протокол удалённого вызова процедур, использующий JSON для кодирования сообщений.
XMLHDpRequest • XMLH%pRequest (XMLHTTP, XHR) — API, доступный в скриптовых языках браузеров, таких как JavaScript. • Использует запросы HTTP или HTTPS напрямую к веб-серверу и загружает данные ответа сервера напрямую в вызывающий скрипт. • Информация может передаваться в любом текстовом формате, например, в XML, HTML или JSON. Позволяет осуществлять HTTPзапросы к серверу без перезагрузки страницы.
JSON • JSON (JavaScript Object Notacon) — текстовый формат обмена данными, основанный на JavaScript. • Заменил XML как формат данных для HTTP методов
Итоговое приложение курса Теперь нам нужно вспомнить итоговое приложение (в реальности Figma). В нем 12 страниц, но только 9 используют наши методы: • Список услуг и Одна услуга • Список заявок и Одна заявка • Список услуг таблицей и Редактирование услуги • Регистрация, авторизация, Личный кабинет • Главная, 403 и 404
Методы по вашей теме Услуги Заявки м-м через 2 id • Список услуг • Список заявок • Удаление из м-м • Добавление услуги • Получение заявки • Изменение количества/порядка/ • Получение услуги • Редактирование значения в м-м заявки • Редактирование услуги • Изменение статуса Пользователь создателем • Удаление услуги • Регистрация • Изменение статуса • Добавление услуги в модератором • Обновление последнюю заявку пользователя • Удаление заявки • Добавление/замена • Аутентификация (4 лаб) изображения • Деавторизация (4 лаб)
AJAX запросы REST API + SPA
Django Rest Framework • Django REST hzps://www.django-rest-framework.org • hzps://django.fun/ru/docs/django-rest-framework/3.12/ Требуется • Python (3.6, 3.7, 3.8, 3.9, 3.10) • Django (2.2, 3.0, 3.1, 3.2, 4.0) • pip install djangores(cid:136)ramework
Модель • python manage.py makemigracons (создаем файлы миграций) • python manage.py migrate (применяем файлы миграций к базе)
Сериализация пример • Сериализация — процесс перевода структуры модели в JSON формат и обратно. • Каждый раз мы должны получить данные из модели и передать их на клиент в виде JSON. Обратно данные мы получаем также в виде JSON и должны использовать методы модели для изменения БД. Все это делает сериализатор
Сериализация поля • Нам необходимо определить поля, которые будет использовать сериализатор • Все поля, часть или все кроме • Автоматические поля – из модели • Декларируемые – мы пропишем их сами в сериализаторе до class Meta
Сериализация вложенность • Вложенные модели нужно передавать в том же запросе • Поэтому сериализатор должен поддерживать вложенность • А лучше передать сериализатор в качестве декларируемого поля
API View • В Django в нашем курсе используем только API View (классовый или функциональный) • Этот подход похож на подход в Go • Позволяет нам сделать конкретные бизнес методы, а не просто набор CRUD операций
URL API View • В url указываем домен (группа методов), название метода и идентификаторы
ViewSet – не используем • В нашем курсе мы не используем ViewSet, но он похож на классовый API View
ViewSet – не используем
URL ViewSet – не используем
Go Для Go также необходимо добавить: • сериализацию в JSON • обращение к БД через ORM После методички рекомендуется посмотреть наш ролик VK по авторизации Golang
Инструменты тестирования Инструменты для нашего курса • Postman • Insomnia Очень удобно, но необходимо реализовать • Swagger
Swagger Developing APIs • When crea4ng APIs, Swagger tooling may be used to automa4cally generate an Open API document based on the code itself. This embeds the API descrip4on in the source code of a project and is informally called code-first or boEom-up API development. • Alterna4vely, using Swagger Codegen, developers can decouple the source code from the Open API document, and generate client and server code directly from the design. This makes it possible to defer the coding aspect. Interac4ng with APIs • Using the Swagger Codegen project, end users generate client SDKs directly from the OpenAPI document, reducing the need for human-generated client code. As of August 2017, the Swagger Codegen project supported over 50 different languages and formats for client SDK genera4on. Documen4ng APIs • When described by an OpenAPI document, Swagger open-source tooling may be used to interact directly with the API through the Swagger UI. This project allows connec4ons directly to live APIs through an interac4ve, HTML-based user interface. Requests can be made directly from the UI and the op4ons explored by the user of the interface.
Insomnia
Insomnia
Insomnia
Postman • Другое распространенное приложение для тестирование HTTPметодов • Также можно тестировать grpc-методы
Сервис-ориентированная архитектура • Се́рвис-ориенти́рованная архитектур́ а (СОА, англ. service-oriented architectureSOA) — модульный подход к разработке ПО на основе использования по стандартизированным протоколам распределённых, слабо связанных и легко заменяемых сервисов со стандартизированными интерфейсами. • Большие системы могут взаимодействовать друг с другом через SOA (доп. задание к ДЗ). Ранее могли через DB-линки
Микросервисная архитектура • Микросервисная архитектура — вариант сервис-ориентированной архитектуры программного обеспечения на основе взаимодействия небольших, слабо связанных и легко изменяемых модулей микросервисов • Теперь каждая система состоит из множества отдельных сервисов, выполняющих самостоятельную бизнесфункцию • Например можно разделить услуги, заявки и авторизацию • Получила распространение в середине 2010-х годов в связи с развитием практик гибкой разработки и DevOps
Файловое хранилище Отправка, получение файлов в файловом хранилище • Необходимо настроить файловое хранилище S3 и разработать методы доступа к нему. • Хранилище необходимо для синхронизации двух узлов (условные клиент и сервер облака). • Должна быть предусмотрена синхронизация, если одна из версий устарела (на клиенте не было интернета)
S3 • S3 Simple Storage Service • Ceph, Minio и тд Создание озера данных • Приложения для аналитики больших данных, искусственного интеллекта (ИИ), машинного обучения (ML) и высокопроизводительных вычислений (HPC). • Объектное хранилище S3 — масштабируемый и гибкий сервис, позволяющий хранить и обрабатывать данные в исходном формате • Данные размещаются в виде объектов в плоском адресном пространстве, что дает возможность для доступа к хранилищу по API из любого места • Данные помещаются во множество контейнеров (папок) • Содержимое любого контейнера можно просматривать, перемещать или удалять • У каждого контейнера и объекта есть адрес в виде уникального идентификатора
Ceph • Свободная программная объектная сеть хранения • Обеспечивает файловый и блочный интерфейсы доступа • Объектное хранилище
Ceph • При выходе любого диска, узла или группы узлов из строя Ceph обеспечит сохранность данных • Ceph восстановит утраченные копии на других узлах до тех пор, пока вышедшие из строя узлы или диски не заменят на рабочие.
Minio загрузка изображения • Мы не загружаем изображения напрямую в Minio из браузера, потому что далее мы ограничим на это права пользователей • Нам требуется загрузить/заменить изображение в Minio, а в Postgres url
Облачные сервисы и Firebase • Хостинги для вашего бекенда: Heroku, AWS и тд • Платно + администрирование • Любая архитектура Firebase • Удобно использовать для мобильных приложений • Low/No code – готовая конфигурация