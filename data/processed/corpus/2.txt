doc_id: 2
Лекция 11 Развертывание и адаптивность Разработка интернет приложений Канев Антон Игоревич
Адаптивность • свойства обертки, которые позволяют переносить элементы на новую строчку, если предыдущая заполнилась (flex-wrap), а так же задают отступы между соседними элементами сверху и снизу (gap) • на свойства самой карточки: в данном случае нас интересует первое свойство flex, а точнее последнее значение в нем. Это значение определяет, в какой момент элементы переносятся на новую строчку, а именно если размер элемента становится равным 300px
Развертывание • На диаграмме развертывания мы указали наши бэкенд и фронтенд, а также обратный прокси, нативное приложение и Pages – знать отличия! • Указали IP трех разных устройств и номера портов, которые используются всеми нашими приложениями • Напрямую к веб-сервису могут обращаться наше нативное приложение и прокси • Требуется добавить Minio, Redis • Нужно изменить IP адреса, порты, технологии, названия устройств, а также добавить доп. ДЗ
GitHub Pages https://rashidshamloo.hashnode.dev/deploying-vite-react-app-to-github-pages • Мы можем бесплатно развернуть наше React приложение на GitHub Pages • Необходимо выполнить настройки в GitHub: Settings/Pages • Также необходимо настроить развертывание Vite в проекте
GitHub Pages • 1. Установить gh-pages пакет npm install gh-pages --save-dev • 2. В файле package.json добавить строки перед "build": "vite build", "predeploy": "npm run build", "deploy": "gh-pages -d dist", • 3. В файле vite.config.js добавить строку перед plugins: [react()], base: "YOUR_REPOSITORY_NAME", • 4. Выполнить развертывание/обновление npm run deploy Теперь есть ветка gh-pages в репозитории, а приложение развернуто в GitHub https://rashidshamloo.hashnode.dev/deploying-vite-react-app-to-github-pages
VK mini App • Создаем React-приложение, но используем бэкенд VK Магазин • React-приложение, которое показывает совместную работу различных библиотек ВКонтакте в мини-приложении, а также демонстрирует лучшие подходы к созданию мини-приложений. • Миниприложение: vk.com/app51654068 • Исходный код: github.com/VKCOM/vkmini-apps-examples
WebView и iframe Две важные веб-технологии: • WebView – компонент, позволяющий использовать веб (верстку, стили, код JS) внутри приложений • iframe – для встраивания другого HTML-документа в текущий: карта, видео, пост из соцсети <iframe src="https://www.google.com/" height="500px" width="500px"></iframe>
Виды нативных приложений • Нативное приложение (native app) – прикладная программа, которая разработана для определенной платформы или для определенного устройства • Мобильное приложение (mobile app) — прикладная программа, предназначенная для работы на смартфонах, планшетах и других мобильных (портативных, переносных, карманных) устройствах, собирается отдельно для iOS или Android • Десктопное приложение (desktop app) — программа, которая устанавливается на компьютер пользователя и работает под управлением операционной системы, собирается отдельно для maxOS, Windows, Linux
Кроссплатформенная разработка • Flutter, React Native, Kotlin multiplatform для кроссплатформенной мобильной разработки • Flutter на Dart от Google • React Native на JavaScript • Kotlin multiplatform на Kotlin от JetBrains • Electron/Tauri и Qt для кроссплатформенных десктопных приложений • Electron на JavaScript • Tauri на JavaScript и Rust • Qt на С++, PyQt на Python
Web vs мобильные приложения
PWA Progressive Web App: • Выглядит как приложение • Работает лучше и быстрее на телефоне • Работает offline
PWA. manifest.json
PWA. Service Worker
Electron • Electron — фреймворк, разработанный GitHub. • Позволяет разрабатывать нативные графические приложения для операционных систем с помощью вебтехнологий, комбинируя возможности Node.js для работы с back-end и браузера Chromium
Tauri • Фреймворк для создания десктопных приложений использующий Tao+Wry. • Похожий на Electron, но позволяющий использовать Rust вместо Node.js, например, для взаимодействия с файловой системой. • 2 октября 2024 вышла Tauri v2 https://tauri.app/blog/tauri-20/ https://arxiv.org/pdf/2407.07238
Tauri • Мы разрабатываем с помощью React приложение, которое имеет доступ к файловой системе, нативному меню, диалоговым окнам и к нашему API
Tauri • Создание интерфейса Tauri приложения на React включает использование известных нам компонентов, обработчиков событий и хуков
Dioxus • Еще один фреймворк на Rust • Нам интересен тем, что концепции React используются и в других языках тоже https://best-of-web.builder.io/library/DioxusLabs/dioxus