doc_id: 4
Лекция 14 Асинхронность и real-time web Разработка интернет приложений Канев Антон Игоревич
Заявка-черновик • Страница списка услуг включает сам список услуг и кнопку перехода в «корзину» на страницу с заявкой-черновиком • При нажатии на кнопку «Корзины» мы открываем страницу конструктора заявки • Там кнопки Сформировать, Удалить, удал./ред. м-м
Заявка-черновик • Страница заявки – это отдельная страница • А кнопка «Корзины» имеет просто два состояния: заполнена/не заполнена • Не нужно отображать содержимое заявки прямо на странице услуг • Не надо выводить даже количество позиций в заявке • только состояние «Заполнено/Нет» id черновика указано или пусто
Два списка услуг • Ваша страница списка услуг для гостя и создателя заявки представлена карточками • Тут вы добавляете виджет корзины и кнопку добавления услуги в заявку • Но список услуг для редактирования модератором должен быть в виде таблицы • Тут будут кнопки добавления, редактирования и удаления
Обучение и стажировки Курсы VK https://park.vk.company/curriculum/program/elective/ • 2-4 семестровые программы (Android, iOS, Web, ML) • Семестровые курсы VK (Android, iOS, Go,) Курсы и стажировки выпускников ИУ5 и Технопарка из KTS https://metaclass.kts.studio/#courses • Бесплатные курсы по фронденду (React) и бэкенду (Python) • Стажировки (Django/Асинхронный Python, React)
Резюме Советы по оформлению резюме https://www.superjob.ru/pro/5320/ • Опишите ваши проекты, приведите ссылки • Не пишите общеизвестных вещей или просто список технологий • Опишите ваши достижения, решения в проекте
Пример • При наличии опыта можно оценить по предыдущим рабочим местам • Если нет опыта – оценить можно только по вашим проектам
DMZ • DMZ (Demilitarized Zone) – сегмент сети, содержащий общедоступные сервисы и отделяющий их от частных • Разделение производим с помощью firewall
Как выглядит «DMZ» у нас? • У нас основной веб-сервис доступен извне – это хороший пример DMZ, остается только его оградить с помощью firewall • Мы это не делаем, но подразумеваем, что эти сетевые настройки есть • Таким образом все наши критичные данные и асинхронный сервис недоступны извне • Но вот для обратного вызова от асинхронного к основному мы должны добавить какую-то аутентификацию
Sequence для асинхронного метода • При формировании заявки 1 мы обращаемся к асинхронному сервису 2 и сразу получаем ответ на фронтенде 4 – заявка сформирована • Но запись результата в БД будет только через время отдельным вызовом 7 • На фронтенде результат мы получим только когда сами спросим 9 об этом • Запросы GET 5 и 9 аналогичны – это Polling из ДЗ • На своей диаграмме вы 5 и 6 • Для псевдо аутентификации-авторизации используем не указываете, мы это только подразумеваем ключ-токен для сервиса в DMZ в запросе 7
Код лабораторной • Создаем новый сервис, например на 3000 порте • В нем будет один метод set-status • Данный метод будет запускать отложенное действие
Код лабораторной • Наше отложенное действие заключение в вычислении случайного результата get_random_status • После 5 секунд ожидания мы вызываем метод PUT stocks/:id/put нашего основного сервиса на 8000 порте
Просмотр результатов 2-ух сервисов
Асинхронное взаимодействие В качестве достоинств можно выделить • хорошее использование вычислительных ресурсов серверов (никто не простаивает) • избегание длительных задержек у пользователя • Как недостаток • сложность в разработке, особенно когда таких вызовов становится много и они начинают влиять друг на друга • пиковые нагрузки на сервера • необходимость добавления real-time web для фронтенда для получения изменений в данных
Решение проблем асинхронности • Использование WebSocket, Long Polling, Short Polling и других технологий на фронтенде для обновления данных • Выделение отдельных сервисов-обработчиков (деление на микросервисы) под каждое выполняемое действиепреобразование данных для сокращения зависимостей • Использование брокеров и очередей для избегания пиковых нагрузок
Шлюз сообщений Отправка email, телеграм, vk через очередь сообщений • Необходимо разработать два сервиса для отправки сообщений: брокер с очередью сообщений и сервис отправки. • У каждого студента один из источников (email, телеграм, vk) по варианту. • За счет очереди должна быть предусмотрена гарантированная отправка в случае недоставки сообщения. • Если сообщение не было доставлено, оно повторно отправляется из очереди.
Варианты хранения в брокере • Redis – резидентная база данных • Apache Kafka – брокер сообщений • RabbitMQ – брокер сообщений • В веб-приложениях очереди часто используются для отложенной обработки событий или в качестве временного буфера между другими сервисами, тем самым защищая их от всплесков нагрузки.
Apache Kafka • Представим, что есть некий сайт, на котором происходит регистрация пользователя. Для каждой регистрации мы должны: 1) отправить письмо пользователю, 2) пересчитать дневную статистику регистраций. • Kafka упрощает задачу достаточно послать сообщения всего один раз, а консьюмеры сервиса отправки сообщений и консьюмеры статистики сами считают его по мере необходимости
Как реализовать взаимодействие • Сервисы могут обращаться друг к другу просто по HTTP – хорошо для простых решений. А можно использовать gRPC • gRPC (Remote Procedure Calls) — это система удалённого вызова процедур (RPC) с открытым исходным кодом, первоначально разработанная в Google • В качестве транспорта используется HTTP/2, в качестве языка описания интерфейса — Protocol Buffers. • gRPC предоставляет такие функции как аутентификация, двунаправленная потоковая передача и управление потоком, блокирующие или неблокирующие привязки, а также отмена и тайм-ауты.
Пример gRPC Python • Описываем структуру данных, сериализатор https://djangogrpcframework.readthedocs.io/en/latest/quickstart.html
Варианты real-time для фронтенда • Polling – самый простой вариант, просто запросы по таймеру • При long polling сервер задерживает у себя запрос до возникновения события • EventSource позволяет получить несколько ответов от сервера в разные моменты времени вместо одного • WebSocket – полноценный двунаправленный обмен с сервером
Реализация Polling • Есть разные реализации short polling • Одна из самых простых – сделать рекурсивный таймер, по истечении которого мы будем выполнять запрос и новый таймер
Обмен по WebSocket Обмен статусами собеседников через WebSocket • Необходимо реализовать механизм обмена сообщениями между двумя собеседниками по протоколу WebSocket. • Должна быть предусмотрена гарантированная отправка и синхронизация версий, если какое-то сообщение пришло раньше-позже (вследствие задержек). • То есть отображать нужно версии в порядке очередности.
WebSocket • Протокол связи поверх TCP-соединения, предназначенный для обмена сообщениями между браузером и веб-сервером, используя постоянное соединение.
WebSocket
Клиентский скрипт WebSocket
WebSocket