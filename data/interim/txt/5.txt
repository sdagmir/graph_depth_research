doc_id: 5
Лекция 14 Мобильные приложения Разработка интернет приложений Канев Антон Игоревич
Мобильные приложения • Мобильное приложение ( «Mobile application») — программное изделие, разновидность прикладного программного обеспечения, предназначенная для работы на смартфонах, планшетах и других мобильных (портативных, переносных, карманных) устройствах
Языки • iOS: Objective-C, Swift • Android: Java, Kotlin
Среды разработки • Android Studio • Xcode
Web vs мобильные приложения
Трехзвенная архитектура. API • Наше десктопное, кроссплатформенное или мобильное приложение должно обращаться к разработанному нами API • Использовать два запроса: GET списка услуг и GET одной услуги
React Native • React Native – фреймворк для кроссплатформенной разработки на JavaScript • Позволяет создавать нативные приложения с помощью известных нам технологий: axios, redux-toolkit и тд
React Native • Мы можем вести разработку в VS Code и смотреть изменения в телефоне через QR • Или в Android Studio и эмуляторе
React Native • Создадим карточки и заполним их данными из API
Model ViewModel View • Паттерн MVVM должен быть нам уже знаком на примере React • MVVM отличается от MVC
Архитектура Swift приложения • Модель – отвечает за использование предметных (бизнес, domain) данных. Активные модели умеют уведомлять окружающих об изменениях в себе, а пассивные — нет. • Представление (Вид, View) – отвечает за слой представления (GUI). Не обязательно должен быть связан с UI отрисовкой. Помимо представления пользователю данных, у него есть ещё одна важная задача: принять событие пользователя. • Контроллер/Презентер/ViewModel – так или иначе отвечают за связь модели с контроллером. В основном занимаются тем, что пробрасывают события модели в представление, а события представления – в модель, соответствующим образом их преобразуя и обрабатывая.
UI компоненты • Уже знакомый нем термин UI kit • Использование кнопок, изображений, списков и других компонентов
UITableView • Для того, чтобы на экране отобразилась таблица, необходимо создать переменную класса WeatherViewController типа UITableView и задать там первичные настройки
Модель данных • В данном пункте мы создадим модель данных, которая соответствует тому, что вы уже создали на бэкенде. • В эту модель данных будет парситься json. Также мы создадим запрос к вашему сервису и сам парсинг ответа. • Прежде чем приступать к созданию подключения сервиса необходимо задать модель с данными, которые придут в ответе от сервиса.
Генерация запроса • Добавляем обращение в внешнему API • В вашей лабораторной вы заменяете URL на ваш API • Для эмулятора можно указать localhost • Для показа IP в локальной сети, например 192.168.100.108
Запросы к API • Создание обработчиков запросов к собственному API сервису в отдельном файле • Указываем в какие переменные мы должны положить полученные файлы
Заполнение страницы данными
Переходы между страницами • Далее необходимо добавить переход на данный экран с основного
Заполнение детальной информации • Создадим функцию, которая будет сохранять в текстовые лейблы значения строк с детальной информацией об объекте, которые мы передали с первого экрана. • которая вызывается из инициализатора контроллера
Верстка страницы с деталями
Архитектура Android приложения • Роль слоя UI (или слоя представления) — отображать на экране данные приложения. • Слой данных в приложении содержит бизнес-логику — правила, по которым приложение создаёт, хранит и изменяет данные. • Доменный слой располагается между слоями UI и данных. Доменный слой отвечает за инкапсуляцию сложной бизнес- логики или простой бизнес-логики, которую переиспользуют несколько ViewModel.
Счетчик в Android Studio
Окно списка • Создаем карточки на основе mock • Помещаем данные из модели в компоненты нашего экрана
Модель для полученных данных • Сделаем структуру – модель для полученных от API данных
Обращение к API • Используется REST клиент для Android Retrofit для выполнения HTTP запросов к API • Для эмулятора можно указать localhost • Для показа IP в локальной сети, например 192.168.100.108
Окно детализации и поиск • Поиск нужно переделать на бэкенд: мобильное приложение должно работать вместе с веб- сервисом • Также необходимо добавить второй экран с детальной информацией